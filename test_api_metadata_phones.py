"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ /api/meta-data endpoint
–∑ –Ω–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏ column_metadata —Ç–∞ lead_phones.
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ app
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from dotenv import load_dotenv
load_dotenv()

async def test_meta_data_api():
    """–¢–µ—Å—Ç—É—î /api/meta-data endpoint –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏."""
    from main import get_meta_data
    from fastapi import Request

    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø /api/meta-data ENDPOINT")
    print("="*80)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
    end_date = datetime.now().strftime("%Y-%m-%d")
    start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

    print(f"\nüìÖ –ü–µ—Ä—ñ–æ–¥ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {start_date} - {end_date}")
    print(f"üîë META_PAGE_ID: {os.getenv('META_PAGE_ID')}")
    print(f"üîë NETHUNT_FOLDER_ID: {os.getenv('NETHUNT_FOLDER_ID')}")
    print(f"üîë ALFACRM_COMPANY_ID: {os.getenv('ALFACRM_COMPANY_ID')}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π Request –æ–±'—î–∫—Ç
    class FakeRequest:
        def __init__(self):
            self.client = type('obj', (object,), {'host': '127.0.0.1'})()

    request = FakeRequest()

    try:
        print("\n‚è≥ –í–∏–∫–ª–∏–∫–∞—é API endpoint...")
        result = await get_meta_data(request, start_date=start_date, end_date=end_date)

        if isinstance(result, dict):
            print("\n‚úÖ API –ø–æ–≤–µ—Ä–Ω—É–≤ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ–∫—Ü—ñ–π
            print("\n" + "-"*80)
            print("üìä –°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü:")
            print("-"*80)

            for key in result.keys():
                if key in ["ads", "students", "teachers"]:
                    count = len(result[key]) if isinstance(result[key], list) else 0
                    print(f"  ‚Ä¢ {key}: {count} –∑–∞–ø–∏—Å—ñ–≤")
                elif key == "column_metadata":
                    print(f"  ‚Ä¢ {key}: {len(result[key])} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
                elif key == "lead_phones":
                    print(f"  ‚Ä¢ {key}: –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                else:
                    print(f"  ‚Ä¢ {key}: {result[key]}")

            # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ column_metadata
            if "column_metadata" in result:
                print("\n" + "-"*80)
                print("üé® COLUMN METADATA (–ö–û–õ–¨–û–†–û–í–ê –ú–ê–†–ö–Ü–†–û–í–ö–ê):")
                print("-"*80)

                metadata = result["column_metadata"]

                for data_type in ["students", "teachers", "ads"]:
                    if data_type in metadata:
                        type_metadata = metadata[data_type]

                        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
                        meta_count = sum(1 for v in type_metadata.values() if v == "meta")
                        crm_count = sum(1 for v in type_metadata.values() if v == "crm")
                        formula_count = sum(1 for v in type_metadata.values() if v == "formula")

                        print(f"\n  {data_type.upper()}:")
                        print(f"    üîµ Meta (–≥–æ–ª—É–±—ñ): {meta_count} –ø–æ–ª—ñ–≤")
                        print(f"    üî¥ CRM (—Ä–æ–∂–µ–≤—ñ): {crm_count} –ø–æ–ª—ñ–≤")
                        print(f"    üü¢ Formula (–∑–µ–ª–µ–Ω—ñ): {formula_count} –ø–æ–ª—ñ–≤")
                        print(f"    üìä –í—Å—å–æ–≥–æ: {len(type_metadata)} –ø–æ–ª—ñ–≤")

                        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
                        print(f"\n    –ü—Ä–∏–∫–ª–∞–¥–∏ –ø–æ–ª—ñ–≤:")
                        shown = 0
                        for field, category in type_metadata.items():
                            if shown < 3:
                                color_icon = "üîµ" if category == "meta" else "üî¥" if category == "crm" else "üü¢"
                                print(f"      {color_icon} {field}: {category}")
                                shown += 1

            # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ lead_phones
            if "lead_phones" in result:
                print("\n" + "-"*80)
                print("üìû LEAD PHONES (–¢–ï–õ–ï–§–û–ù–ò –ó –°–¢–ê–¢–£–°–ê–ú–ò):")
                print("-"*80)

                lead_phones = result["lead_phones"]

                for data_type in ["students", "teachers"]:
                    if data_type in lead_phones:
                        type_phones = lead_phones[data_type]
                        print(f"\n  {data_type.upper()}:")
                        print(f"    üìã –ö–∞–º–ø–∞–Ω—ñ–π –∑ –¥–∞–Ω–∏–º–∏: {len(type_phones)}")

                        if type_phones:
                            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 –∫–∞–º–ø–∞–Ω—ñ—ó
                            for idx, (campaign_id, status_data) in enumerate(list(type_phones.items())[:2]):
                                print(f"\n    –ö–∞–º–ø–∞–Ω—ñ—è {idx+1} ({campaign_id}):")
                                print(f"      –°—Ç–∞—Ç—É—Å—ñ–≤: {len(status_data)}")

                                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 —Å—Ç–∞—Ç—É—Å–∏
                                for status_name, phones in list(status_data.items())[:2]:
                                    print(f"\n        –°—Ç–∞—Ç—É—Å: {status_name}")
                                    print(f"        –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {len(phones)}")

                                    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ passed/current
                                    passed = sum(1 for p in phones if p.get("status") == "passed")
                                    current = sum(1 for p in phones if p.get("status") == "current")
                                    print(f"          üî¥ Passed: {passed}")
                                    print(f"          üü¢ Current: {current}")

                                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫ –ø—Ä–∏–∫–ª–∞–¥
                                    if phones:
                                        example = phones[0]
                                        status_icon = "üî¥" if example.get("status") == "passed" else "üü¢"
                                        print(f"          –ü—Ä–∏–∫–ª–∞–¥: {status_icon} {example.get('phone', 'N/A')} ({example.get('status')})")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n" + "="*80)
            print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
            print("="*80)

            return True

        else:
            print("\n‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ —Å–ª–æ–≤–Ω–∏–∫")
            print(f"–¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {type(result)}")
            print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
            return False

    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–Ü–î –ß–ê–° –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
        print(f"  {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...")
    success = asyncio.run(test_meta_data_api())

    if success:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        sys.exit(1)
