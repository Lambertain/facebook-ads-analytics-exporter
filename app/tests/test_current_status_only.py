"""
–¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ current-status-only –ª–æ–≥—ñ–∫–∏ —Ç—Ä–µ–∫—ñ–Ω–≥—É –ª—ñ–¥—ñ–≤.

–ú–ï–¢–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∫–æ–∂–µ–Ω –ª—ñ–¥ —Ä–∞—Ö—É—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –≤ –æ–¥–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ.
–ö–†–ò–¢–ï–†–Ü–ô –£–°–ü–Ü–•–£: sum(—Å—Ç–∞—Ç—É—Å—ñ–≤) <= –∑–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–ª—ñ–¥—ñ–≤

–¢–µ—Å—Ç—É—î–º–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ—è—Ö —á–µ—Ä–µ–∑ Meta API.
"""
import os
import sys
import asyncio
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ app –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ Python path
app_dir = Path(__file__).parent.parent
sys.path.insert(0, str(app_dir))

from services import meta_leads
from services import alfacrm_tracking


async def test_current_status_only_no_duplication():
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –ª—ñ–¥ —Ä–∞—Ö—É—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ.

    –õ–æ–≥—ñ–∫–∞:
    1. –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–º–ø–∞–Ω—ñ—ó –∑ Meta API –∑–∞ –ø–µ—Ä—ñ–æ–¥
    2. –û–±–æ–≥–∞—á—É—î–º–æ —á–µ—Ä–µ–∑ AlfaCRM
    3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: sum(funnel_stats.values()) <= leads_count
    4. –Ø–∫—â–æ —î –¥—É–±–ª—é–≤–∞–Ω–Ω—è - —Ç–µ—Å—Ç –ø–∞–¥–∞—î –∑ –¥–µ—Ç–∞–ª—è–º–∏
    """

    print("\n" + "="*80)
    print("–¢–ï–°–¢: Current-Status-Only (–±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤)")
    print("="*80)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    page_id = os.getenv('FACEBOOK_PAGE_ID')
    page_token = os.getenv('META_PAGE_ACCESS_TOKEN')
    start_date = '2025-09-21'
    end_date = '2025-09-23'

    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"  Page ID: {page_id}")
    print(f"  –ü–µ—Ä—ñ–æ–¥: {start_date} - {end_date}")

    # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—ó –∑ Meta
    print(f"\n[1/2] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤ –∑ Meta API...")
    try:
        campaigns_data = await meta_leads.get_leads_for_period(
            page_id=page_id,
            page_token=page_token,
            start_date=start_date,
            end_date=end_date
        )

        total_leads = sum(len(c['leads']) for c in campaigns_data.values())
        print(f"  ‚úì –û—Ç—Ä–∏–º–∞–Ω–æ {len(campaigns_data)} –∫–∞–º–ø–∞–Ω—ñ–π, {total_leads} –ª—ñ–¥—ñ–≤")

        if len(campaigns_data) < 5:
            print(f"  ‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ {len(campaigns_data)} –∫–∞–º–ø–∞–Ω—ñ–π. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –º—ñ–Ω—ñ–º—É–º 5.")

    except Exception as e:
        print(f"  ‚úó –ü–û–ú–ò–õ–ö–ê: {e}")
        return

    # –ö—Ä–æ–∫ 2: –û–±–æ–≥–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ AlfaCRM
    print(f"\n[2/2] –û–±–æ–≥–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ AlfaCRM (CURRENT-STATUS-ONLY –õ–û–ì–Ü–ö–ê)...")
    try:
        enriched = await alfacrm_tracking.track_leads_by_campaigns(
            campaigns_data=campaigns_data,
            page_size=500
        )

        print(f"  ‚úì –û–±—Ä–æ–±–ª–µ–Ω–æ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π")

    except Exception as e:
        print(f"  ‚úó –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return

    # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    print(f"\nüìä –¢–µ—Å—Ç—É—î–º–æ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π:")
    print("-" * 80)

    failed_campaigns = []

    for idx, (campaign_id, campaign) in enumerate(enriched.items(), 1):
        campaign_name = campaign.get('campaign_name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        leads_count = campaign['leads_count']
        funnel_stats = campaign['funnel_stats']

        print(f"\n{idx}. –ö–∞–º–ø–∞–Ω—ñ—è: {campaign_name[:50]}")
        print(f"   ID: {campaign_id}")
        print(f"   –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤: {leads_count}")

        # –†–∞—Ö—É—î–º–æ —Å—É–º—É –ª—ñ–¥—ñ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–≤–∏–∫–ª—é—á–∞—é—á–∏ –∫–ª—é—á '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤')
        sum_in_statuses = sum(
            count for status, count in funnel_stats.items()
            if status != '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤'
        )

        print(f"   –°—É–º–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: {sum_in_statuses}")
        print(f"   –†—ñ–∑–Ω–∏—Ü—è: {sum_in_statuses - leads_count}")

        # –ö–†–ò–¢–ï–†–Ü–ô –£–°–ü–Ü–•–£: sum_in_statuses <= leads_count
        if sum_in_statuses > leads_count:
            print(f"   ‚ùå –ü–†–û–í–ê–õ: –î—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤! {sum_in_statuses} > {leads_count}")

            # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"   –î–µ—Ç–∞–ª—ñ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status, count in sorted(funnel_stats.items()):
                if count > 0 and status != '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤':
                    print(f"      - {status}: {count}")

            failed_campaigns.append({
                'campaign_id': campaign_id,
                'campaign_name': campaign_name,
                'expected': leads_count,
                'actual': sum_in_statuses,
                'difference': sum_in_statuses - leads_count,
                'funnel_stats': {k: v for k, v in funnel_stats.items() if v > 0}
            })
        else:
            print(f"   ‚úÖ –£–°–ü–Ü–•: –ù–µ–º–∞—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è")

    # –ü—ñ–¥—Å—É–º–∫–∏
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("="*80)

    if failed_campaigns:
        print(f"\n‚ùå –ü–†–û–í–ê–õ: {len(failed_campaigns)} –∑ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π –º–∞—é—Ç—å –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤\n")

        for idx, failed in enumerate(failed_campaigns, 1):
            print(f"{idx}. {failed['campaign_name'][:50]}")
            print(f"   –û—á—ñ–∫—É–≤–∞–Ω–æ: {failed['expected']}")
            print(f"   –§–∞–∫—Ç–∏—á–Ω–æ: {failed['actual']}")
            print(f"   –î—É–±–ª—é–≤–∞–Ω–Ω—è: +{failed['difference']} –ª—ñ–¥—ñ–≤")
            print()

        raise AssertionError(f"–í–∏—è–≤–ª–µ–Ω–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤ –≤ {len(failed_campaigns)} –∫–∞–º–ø–∞–Ω—ñ—è—Ö")
    else:
        print(f"\n‚úÖ –£–°–ü–Ü–•: –í—Å—ñ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
        print("   –ù–µ–º–∞—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤ - –∫–æ–∂–µ–Ω –ª—ñ–¥ —Ä–∞—Ö—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ")


if __name__ == "__main__":
    asyncio.run(test_current_status_only_no_duplication())
