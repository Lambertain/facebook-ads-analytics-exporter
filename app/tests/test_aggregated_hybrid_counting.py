"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ù–û–í–û–ô –ª–æ–≥–∏–∫–∏: –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ + hybrid counting.

–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ:
1. 38 —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –≤ 11 –≥—Ä—É–ø–ø
2. Current-status counting —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è non-trial —Å—Ç–∞—Ç—É—Å–æ–≤
3. Cumulative counting —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è trial funnel (–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ >= –ü—Ä–æ–≤–µ–¥–µ–Ω–æ >= –ß–µ–∫–∞—î >= –û–ø–ª–∞—Ç–∞)

–ö–†–ò–¢–ï–†–Ü–ô –£–°–ü–Ü–•–£:
- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–±–Ω–µ >= –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–±–Ω–µ >= –ß–µ–∫–∞—î –æ–ø–ª–∞—Ç—É >= –û—Ç—Ä–∏–º–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞
- –°—É–º–∞ non-trial —Å—Ç–∞—Ç—É—Å—ñ–≤ + –û—Ç—Ä–∏–º–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ <= –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤ (–¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–µ–≤–µ–ª–∏–∫–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ trial funnel)
"""
import os
import sys
import asyncio
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ app –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ Python path
app_dir = Path(__file__).parent.parent
sys.path.insert(0, str(app_dir))

from services import meta_leads
from services import alfacrm_tracking


async def test_aggregated_hybrid_counting():
    """
    –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ù–û–í–£ –ª–æ–≥—ñ–∫—É:
    - –ê–≥—Ä–µ–≥–∞—Ü—ñ—è 38 —Å—Ç–∞—Ç—É—Å—ñ–≤ -> 11 –≥—Ä—É–ø
    - Hybrid counting: current-status + cumulative –¥–ª—è trial funnel
    """

    print("\n" + "="*80)
    print("–¢–ï–°–¢: –ê–≥—Ä–µ–≥–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤ + Hybrid Counting")
    print("="*80)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    page_id = os.getenv('FACEBOOK_PAGE_ID')
    page_token = os.getenv('META_PAGE_ACCESS_TOKEN')
    start_date = '2025-09-21'
    end_date = '2025-09-23'

    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"  Page ID: {page_id}")
    print(f"  –ü–µ—Ä—ñ–æ–¥: {start_date} - {end_date}")

    # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—ó –∑ Meta
    print(f"\n[1/2] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥—ñ–≤ –∑ Meta API...")
    try:
        campaigns_data = await meta_leads.get_leads_for_period(
            page_id=page_id,
            page_token=page_token,
            start_date=start_date,
            end_date=end_date
        )

        total_leads = sum(len(c['leads']) for c in campaigns_data.values())
        print(f"  ‚úì –û—Ç—Ä–∏–º–∞–Ω–æ {len(campaigns_data)} –∫–∞–º–ø–∞–Ω—ñ–π, {total_leads} –ª—ñ–¥—ñ–≤")

        if len(campaigns_data) < 5:
            print(f"  ‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ {len(campaigns_data)} –∫–∞–º–ø–∞–Ω—ñ–π. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –º—ñ–Ω—ñ–º—É–º 5.")

    except Exception as e:
        print(f"  ‚úó –ü–û–ú–ò–õ–ö–ê: {e}")
        return

    # –ö—Ä–æ–∫ 2: –û–±–æ–≥–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ AlfaCRM –∑ –ù–û–í–û–Æ –ª–æ–≥—ñ–∫–æ—é
    print(f"\n[2/2] –û–±–æ–≥–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ AlfaCRM (–ê–ì–†–ï–ì–ê–¶–Ü–Ø + HYBRID COUNTING)...")
    try:
        enriched = await alfacrm_tracking.track_leads_by_campaigns(
            campaigns_data=campaigns_data,
            page_size=500
        )

        print(f"  ‚úì –û–±—Ä–æ–±–ª–µ–Ω–æ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π")

    except Exception as e:
        print(f"  ‚úó –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return

    # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ù–û–í–û–á –ª–æ–≥—ñ–∫–∏
    print(f"\nüìä –¢–µ—Å—Ç—É—î–º–æ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π:")
    print("-" * 80)

    # –û—á—ñ–∫—É–≤–∞–Ω—ñ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
    EXPECTED_AGGREGATED_STATUSES = [
        "–ù–µ —Ä–æ–∑—ñ–±—Ä–∞–Ω–∏–π",
        "–ù–µ–¥–æ–∑–≤–æ–Ω",
        "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç",
        "–ó–Ω–∏–∫ –ø—ñ—Å–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É",
        "–í –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—ñ",
        "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–±–Ω–µ",
        "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–±–Ω–µ",
        "–ß–µ–∫–∞—î –æ–ø–ª–∞—Ç—É",
        "–û—Ç—Ä–∏–º–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞",
        "–ü–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ",
        "–°—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∏",
    ]

    failed_campaigns = []
    cumulative_errors = []

    for idx, (campaign_id, campaign) in enumerate(enriched.items(), 1):
        campaign_name = campaign.get('campaign_name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        leads_count = campaign['leads_count']
        funnel_stats = campaign['funnel_stats']

        print(f"\n{idx}. –ö–∞–º–ø–∞–Ω—ñ—è: {campaign_name[:50]}")
        print(f"   ID: {campaign_id}")
        print(f"   –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤: {leads_count}")

        # –ü–ï–†–ï–í–Ü–†–ö–ê 1: –í—Å—ñ –∫–ª—é—á—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∑ EXPECTED_AGGREGATED_STATUSES
        unexpected_keys = [
            key for key in funnel_stats.keys()
            if key not in EXPECTED_AGGREGATED_STATUSES and key != '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤'
        ]

        if unexpected_keys:
            print(f"   ‚ùå –ü–†–û–í–ê–õ: –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á—ñ: {unexpected_keys}")
            failed_campaigns.append({
                'campaign_id': campaign_id,
                'campaign_name': campaign_name,
                'reason': 'unexpected_keys',
                'details': unexpected_keys
            })
            continue

        # –ü–ï–†–ï–í–Ü–†–ö–ê 2: Cumulative counting –¥–ª—è trial funnel
        # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ >= –ü—Ä–æ–≤–µ–¥–µ–Ω–æ >= –ß–µ–∫–∞—î >= –û—Ç—Ä–∏–º–∞–Ω–∞
        –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ = funnel_stats.get("–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–±–Ω–µ", 0)
        –ø—Ä–æ–≤–µ–¥–µ–Ω–æ = funnel_stats.get("–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–±–Ω–µ", 0)
        —á–µ–∫–∞—î = funnel_stats.get("–ß–µ–∫–∞—î –æ–ø–ª–∞—Ç—É", 0)
        –æ–ø–ª–∞—Ç–∞ = funnel_stats.get("–û—Ç—Ä–∏–º–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞", 0)

        print(f"   Trial funnel:")
        print(f"      –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–±–Ω–µ: {–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ}")
        print(f"      –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–±–Ω–µ: {–ø—Ä–æ–≤–µ–¥–µ–Ω–æ}")
        print(f"      –ß–µ–∫–∞—î –æ–ø–ª–∞—Ç—É: {—á–µ–∫–∞—î}")
        print(f"      –û—Ç—Ä–∏–º–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞: {–æ–ø–ª–∞—Ç–∞}")

        cumulative_valid = (
            –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ >= –ø—Ä–æ–≤–µ–¥–µ–Ω–æ >= —á–µ–∫–∞—î and
            –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ >= –æ–ø–ª–∞—Ç–∞ and
            –ø—Ä–æ–≤–µ–¥–µ–Ω–æ >= –æ–ø–ª–∞—Ç–∞
        )

        if not cumulative_valid:
            print(f"   ‚ùå –ü–†–û–í–ê–õ: –ü–æ—Ä—É—à–µ–Ω–Ω—è cumulative –ª–æ–≥—ñ–∫–∏!")
            cumulative_errors.append({
                'campaign_id': campaign_id,
                'campaign_name': campaign_name,
                '–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ': –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ,
                '–ø—Ä–æ–≤–µ–¥–µ–Ω–æ': –ø—Ä–æ–≤–µ–¥–µ–Ω–æ,
                '—á–µ–∫–∞—î': —á–µ–∫–∞—î,
                '–æ–ø–ª–∞—Ç–∞': –æ–ø–ª–∞—Ç–∞,
            })
            failed_campaigns.append({
                'campaign_id': campaign_id,
                'campaign_name': campaign_name,
                'reason': 'cumulative_violation',
                'details': f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ}, –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {–ø—Ä–æ–≤–µ–¥–µ–Ω–æ}, –ß–µ–∫–∞—î: {—á–µ–∫–∞—î}, –û–ø–ª–∞—Ç–∞: {–æ–ø–ª–∞—Ç–∞}"
            })
            continue

        # –ü–ï–†–ï–í–Ü–†–ö–ê 3: –°—É–º–∞ non-trial —Å—Ç–∞—Ç—É—Å—ñ–≤ + –û–ø–ª–∞—Ç–∞ <= leads_count
        # (–¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–µ–≤–µ–ª–∏–∫–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ cumulative counting)
        non_trial_sum = sum(
            count for status, count in funnel_stats.items()
            if status not in ["–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–æ–±–Ω–µ", "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–±–Ω–µ", "–ß–µ–∫–∞—î –æ–ø–ª–∞—Ç—É", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤"]
        )

        print(f"   –°—É–º–∞ non-trial —Å—Ç–∞—Ç—É—Å—ñ–≤: {non_trial_sum}")
        print(f"   –†—ñ–∑–Ω–∏—Ü—è –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º: {non_trial_sum - leads_count}")

        # –î–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è (–¥–æ 10%) —á–µ—Ä–µ–∑ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ cumulative counting
        if non_trial_sum > leads_count * 1.1:
            print(f"   ‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–Ω–∞—á–Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è non-trial —Å—É–º–∏")
            failed_campaigns.append({
                'campaign_id': campaign_id,
                'campaign_name': campaign_name,
                'reason': 'non_trial_overflow',
                'expected': leads_count,
                'actual': non_trial_sum,
                'difference': non_trial_sum - leads_count
            })
        else:
            print(f"   ‚úÖ –£–°–ü–Ü–•: –ê–≥—Ä–µ–≥–∞—Ü—ñ—è + Hybrid counting –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

    # –ü—ñ–¥—Å—É–º–∫–∏
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("="*80)

    if failed_campaigns:
        print(f"\n‚ùå –ü–†–û–í–ê–õ: {len(failed_campaigns)} –∑ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏\n")

        for idx, failed in enumerate(failed_campaigns, 1):
            print(f"{idx}. {failed['campaign_name'][:50]}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {failed['reason']}")
            print(f"   –î–µ—Ç–∞–ª—ñ: {failed.get('details', 'N/A')}")
            print()

        raise AssertionError(f"–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤ {len(failed_campaigns)} –∫–∞–º–ø–∞–Ω—ñ—è—Ö")
    else:
        print(f"\n‚úÖ –£–°–ü–Ü–•: –í—Å—ñ {len(enriched)} –∫–∞–º–ø–∞–Ω—ñ–π –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
        print("   –ê–≥—Ä–µ–≥–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ (38 ‚Üí 11 –≥—Ä—É–ø)")
        print("   Hybrid counting –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ:")
        print("     - Current-status –¥–ª—è non-trial —Å—Ç–∞—Ç—É—Å—ñ–≤")
        print("     - Cumulative counting –¥–ª—è trial funnel")


if __name__ == "__main__":
    asyncio.run(test_aggregated_hybrid_counting())
