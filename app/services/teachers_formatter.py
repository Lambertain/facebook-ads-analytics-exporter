"""
Teachers Formatter Service

Преобразование обогащенных данных кампаний из nethunt_tracking
в формат строк для экспорта в Excel согласно 49-колоночной спецификации вчителей.
"""
from typing import List, Dict, Any


def transform_enriched_teachers_to_excel_rows(
    enriched_campaigns: Dict[str, Dict[str, Any]],
    analysis_date: str,
    date_range: str,
    facebook_ads_url: str
) -> List[Dict[str, Any]]:
    """
    Преобразовать enriched_campaigns в формат строк для Excel (49 колонок A-AX).

    Args:
        enriched_campaigns: Результат от nethunt_tracking.track_leads_by_campaigns()
        analysis_date: Дата анализа (формат: ДД.ММ.РРРР)
        date_range: Период анализа (формат: ДД.ММ.РРРР - ДД.ММ.РРРР)
        facebook_ads_url: URL ссылка на рекламный аккаунт

    Returns:
        Список словарей, где каждый словарь = 1 строка таблицы с 49 колонками (A-AX)
    """
    rows = []

    for campaign_id, campaign_data in enriched_campaigns.items():
        funnel = campaign_data.get("funnel_stats", {})

        # ===== БАЗОВАЯ ИНФОРМАЦИЯ (Колонки A-G) =====
        row = {
            # A: Название РК
            "Назва реклами": campaign_data.get("campaign_name", ""),

            # B: Ссылка на РК
            "Посилання на рекламну компанію": facebook_ads_url,

            # C: Дата анализа
            "Дата аналізу": analysis_date,

            # D: Период анализа
            "Період аналізу": date_range,

            # E: Бюджет
            "Витрачений бюджет в $": campaign_data.get("budget", 0.0),

            # F: Местоположение
            "Місце знаходження": campaign_data.get("location", ""),

            # G: Количество лидов
            "Кількість лідів": campaign_data.get("total_leads", 0),
        }

        # H: Проверка лидов автоматический (ФОРМУЛА: сумма I-AG)
        row["Перевірка лідів автоматичний"] = _calculate_total_verification(funnel)

        # ===== ЛІДИ В ПРОЦЕСІ ОПРАЦЮВАННЯ (Колонки I-U) =====

        # I: Не розібрані ліди
        row["Не розібрані ліди"] = funnel.get("Не розібрані ліди", 0)

        # J: Взяті в роботу
        row["Взяті в роботу"] = funnel.get("Взяті в роботу", 0)

        # K: Контакт (ЦА)
        row["Контакт (ЦА)"] = funnel.get("Контакт (ЦА)", 0)

        # L: НЕ дозвон (не ЦА)
        row["НЕ дозвон (не ЦА)"] = funnel.get("НЕ дозвон (не ЦА)", 0)

        # M: Співбесіда (ЦА)
        row["Співбесіда (ЦА)"] = funnel.get("Співбесіда (ЦА)", 0)

        # N: СП проведено (ЦА)
        row["СП проведено (ЦА)"] = funnel.get("СП проведено (ЦА)", 0)

        # O: Не з'явився на СП
        row["Не з'явився на СП"] = funnel.get("Не з'явився на СП", 0)

        # P: Завуч затвердив кандидата (в процесі опрацювання) ЦА
        row["Завуч затвердив кандидата (в процесі опрацювання) ЦА"] = funnel.get(
            "Завуч затвердив кандидата (в процесі опрацювання) ЦА", 0
        )

        # Q: Завуч не затвердив кандидата (відмовився) ЦА
        row["Завуч не затвердив кандидата (відмовився) ЦА"] = funnel.get(
            "Завуч не затвердив кандидата (відмовився) ЦА", 0
        )

        # R: Переговори (в процесі опрацювання) ЦА
        row["Переговори (в процесі опрацювання) ЦА"] = funnel.get(
            "Переговори (в процесі опрацювання) ЦА", 0
        )

        # S: Стажування ЦА
        row["Стажування ЦА"] = funnel.get("Стажування ЦА", 0)

        # T: Не має учнів ЦА
        row["Не має учнів ЦА"] = funnel.get("Не має учнів ЦА", 0)

        # U: Вчитель ЦА (финальный успешный статус)
        row["Вчитель ЦА"] = funnel.get("Вчитель ЦА", 0)

        # ===== КАТЕГОРІЇ ВТРАТ ТА ВІДМОВ (Колонки V-AG) =====

        # V: Втрачений (відмовився) ЦА
        row["Втрачений (відмовився) ЦА"] = funnel.get("Втрачений (відмовився) ЦА", 0)

        # W: Резерв стажування (в процесі опрацювання) ЦА
        row["Резерв стажування (в процесі опрацювання) ЦА"] = funnel.get(
            "Резерв стажування (в процесі опрацювання) ЦА", 0
        )

        # X: Резерв дзвінок (в процесі опрацювання) ЦА
        row["Резерв дзвінок (в процесі опрацювання) ЦА"] = funnel.get(
            "Резерв дзвінок (в процесі опрацювання) ЦА", 0
        )

        # Y: Офбординг (відмовився) ЦА
        row["Офбординг (відмовився) ЦА"] = funnel.get("Офбординг (відмовився) ЦА", 0)

        # Z: Звільнився (відмовився) ЦА
        row["Звільнився (відмовився) ЦА"] = funnel.get("Звільнився (відмовився) ЦА", 0)

        # AA: Втрачений не цільовий (не цільовий) НЕ ЦА
        row["Втрачений не цільовий (не цільовий) НЕ ЦА"] = funnel.get(
            "Втрачений не цільовий (не цільовий) НЕ ЦА", 0
        )

        # AB: Втрачений недозвон (не цільовий) НЕ ЦА
        row["Втрачений недозвон (не цільовий) НЕ ЦА"] = funnel.get(
            "Втрачений недозвон (не цільовий) НЕ ЦА", 0
        )

        # AC: Втрачений не актуально (не цільовий) НЕ ЦА
        row["Втрачений не актуально (не цільовий) НЕ ЦА"] = funnel.get(
            "Втрачений не актуально (не цільовий) НЕ ЦА", 0
        )

        # AD: Втрачений мала зп (відмовився) ЦА
        row["Втрачений мала зп (відмовився) ЦА"] = funnel.get(
            "Втрачений мала зп (відмовився) ЦА", 0
        )

        # AE: Втрачений назавжди (не цільовий) НЕ ЦА
        row["Втрачений назавжди (не цільовий) НЕ ЦА"] = funnel.get(
            "Втрачений назавжди (не цільовий) НЕ ЦА", 0
        )

        # AF: Втрачений перевірити Вайбер (не цільовий) НЕ ЦА
        row["Втрачений перевірити Вайбер (не цільовий) НЕ ЦА"] = funnel.get(
            "Втрачений перевірити Вайбер (не цільовий) НЕ ЦА", 0
        )

        # AG: Втрачений ігнорує (відмовився) ЦА
        row["Втрачений ігнорує (відмовився) ЦА"] = funnel.get(
            "Втрачений ігнорує (відмовився) ЦА", 0
        )

        # ===== ПІДСУМКОВІ ЛІЧИЛЬНИКИ (Колонки AH-AN) =====

        # AH: Кількість прийшов на співбесіду (ФОРМУЛА: N)
        row["Кількість прийшов на співбесіду"] = row["СП проведено (ЦА)"]

        # AI: Кількість які не потрапили в Бот ТГ (ФОРМУЛА: специфическая)
        row["Кількість які не потрапили в Бот ТГ"] = _calculate_not_in_telegram_bot(row)

        # AJ: Кількість "відмовився" загалом (ФОРМУЛА: сума колонок відмов)
        row["Кількість відмовився загалом"] = _calculate_total_rejected(row)

        # AK: Кількість (в процесці опрацювання) загалом (ФОРМУЛА)
        row["Кількість в процесі опрацювання загалом"] = _calculate_total_in_processing(row)

        # AL: Кількість на етапі "Стажування" (ФОРМУЛА: S)
        row["Кількість на етапі Стажування"] = row["Стажування ЦА"]

        # AM: Кількість цільових лідів (ФОРМУЛА)
        row["Кількість цільових лідів"] = _calculate_total_target_leads(row)

        # AN: Кількість не цільових лідів (ФОРМУЛА)
        row["Кількість не цільових лідів"] = _calculate_total_non_target_leads(row)

        # ===== МЕТРИКИ КОНВЕРСІЇ (%) (Колонки AO-AU) =====

        total_leads = row["Кількість лідів"]

        # AO: Конверсія відмов (%)
        row["Конверсія відмов %"] = _safe_percent(
            row["Кількість відмовився загалом"],
            total_leads
        )

        # AP: Конверсія в опрацюванні (%)
        row["Конверсія в опрацюванні %"] = _safe_percent(
            row["Кількість в процесі опрацювання загалом"],
            total_leads
        )

        # AQ: Конверсія з ліда у СП (%)
        row["Конверсія з ліда у СП %"] = _safe_percent(
            row["Кількість прийшов на співбесіду"],
            total_leads
        )

        # AR: Конверсія з ліда у стажера (%)
        row["Конверсія з ліда у стажера %"] = _safe_percent(
            row["Кількість на етапі Стажування"],
            total_leads
        )

        # AS: Конверсія з прийшов на співбесіду в стажування (%)
        row["Конверсія з прийшов на співбесіду в стажування %"] = _safe_percent(
            row["Кількість на етапі Стажування"],
            row["Кількість прийшов на співбесіду"]
        )

        # AT: % цільових лідів
        row["% цільових лідів"] = _safe_percent(
            row["Кількість цільових лідів"],
            total_leads
        )

        # AU: % не цільових лідів
        row["% не цільових лідів"] = _safe_percent(
            row["Кількість не цільових лідів"],
            total_leads
        )

        # ===== ФІНАНСОВІ ПОКАЗНИКИ (Колонки AV-AW) =====

        budget = row["Витрачений бюджет в $"]

        # AV: Ціна в $ за ліда
        row["Ціна в $ за ліда"] = _safe_division(budget, total_leads)

        # AW: Ціна в $ за цільового ліда
        row["Ціна в $ за цільового ліда"] = _safe_division(
            budget,
            row["Кількість цільових лідів"]
        )

        # ===== СТАТУС КАМПАНІЇ (Колонка AX) =====

        # AX: Статус рекламної кампанії
        # Варианты: "Працює", "Спостерігаємо", "Відключили", "Інше"
        row["Статус рекламної кампанії"] = campaign_data.get("status", "Інше")

        rows.append(row)

    return rows


# ============================================================================
# ФОРМУЛЫ И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
# ============================================================================


def _calculate_total_verification(funnel: Dict[str, int]) -> int:
    """
    Колонка H: Перевірка лідів автоматичний
    Формула: сумма всех статусов (I-AG)
    """
    return sum(funnel.values())


def _calculate_not_in_telegram_bot(row: Dict[str, Any]) -> int:
    """
    Колонка AI: Кількість які не потрапили в Бот ТГ

    ПРИМЕЧАНИЕ: Это специфическая метрика, которая требует дополнительных данных
    от NetHunt (наличие Telegram bot ID).

    Временно возвращаем 0, пока не будет интеграция с Telegram bot данными.
    """
    # TODO: Интегрировать с NetHunt данными о Telegram bot
    return 0


def _calculate_total_rejected(row: Dict[str, Any]) -> int:
    """
    Колонка AJ: Кількість "відмовився" загалом
    Формула: сума всех колонок со статусом "відмовився"
    """
    return (
        row["Завуч не затвердив кандидата (відмовився) ЦА"] +
        row["Втрачений (відмовився) ЦА"] +
        row["Офбординг (відмовився) ЦА"] +
        row["Звільнився (відмовився) ЦА"] +
        row["Втрачений мала зп (відмовився) ЦА"] +
        row["Втрачений ігнорує (відмовився) ЦА"]
    )


def _calculate_total_in_processing(row: Dict[str, Any]) -> int:
    """
    Колонка AK: Кількість (в процесці опрацювання) загалом
    Формула: сума всех колонок со статусом "в процесі опрацювання"
    """
    return (
        row["Не розібрані ліди"] +
        row["Взяті в роботу"] +
        row["Контакт (ЦА)"] +
        row["Співбесіда (ЦА)"] +
        row["Завуч затвердив кандидата (в процесі опрацювання) ЦА"] +
        row["Переговори (в процесі опрацювання) ЦА"] +
        row["Резерв стажування (в процесі опрацювання) ЦА"] +
        row["Резерв дзвінок (в процесі опрацювання) ЦА"]
    )


def _calculate_total_target_leads(row: Dict[str, Any]) -> int:
    """
    Колонка AM: Кількість цільових лідів
    Формула: все колонки з позначкою "ЦА" (целевая аудитория)
    """
    return (
        row["Контакт (ЦА)"] +
        row["Співбесіда (ЦА)"] +
        row["СП проведено (ЦА)"] +
        row["Завуч затвердив кандидата (в процесі опрацювання) ЦА"] +
        row["Завуч не затвердив кандидата (відмовився) ЦА"] +
        row["Переговори (в процесі опрацювання) ЦА"] +
        row["Стажування ЦА"] +
        row["Не має учнів ЦА"] +
        row["Вчитель ЦА"] +
        row["Втрачений (відмовився) ЦА"] +
        row["Резерв стажування (в процесі опрацювання) ЦА"] +
        row["Резерв дзвінок (в процесі опрацювання) ЦА"] +
        row["Офбординг (відмовився) ЦА"] +
        row["Звільнився (відмовився) ЦА"] +
        row["Втрачений мала зп (відмовився) ЦА"] +
        row["Втрачений ігнорує (відмовився) ЦА"]
    )


def _calculate_total_non_target_leads(row: Dict[str, Any]) -> int:
    """
    Колонка AN: Кількість не цільових лідів
    Формула: все колонки з позначкою "НЕ ЦА" (не целевая аудитория)
    """
    return (
        row["НЕ дозвон (не ЦА)"] +
        row["Втрачений не цільовий (не цільовий) НЕ ЦА"] +
        row["Втрачений недозвон (не цільовий) НЕ ЦА"] +
        row["Втрачений не актуально (не цільовий) НЕ ЦА"] +
        row["Втрачений назавжди (не цільовий) НЕ ЦА"] +
        row["Втрачений перевірити Вайбер (не цільовий) НЕ ЦА"]
    )


def _safe_percent(value: float, total: float) -> float:
    """
    Безопасное вычисление процента с округлением до 2 знаков.

    Args:
        value: Числитель
        total: Знаменатель

    Returns:
        Процент (0.00 если знаменатель = 0)
    """
    if total == 0:
        return 0.0
    return round((value / total) * 100, 2)


def _safe_division(numerator: float, denominator: float) -> float:
    """
    Безопасное деление с округлением до 2 знаков.

    Args:
        numerator: Числитель
        denominator: Знаменатель

    Returns:
        Результат деления (0.00 если знаменатель = 0)
    """
    if denominator == 0:
        return 0.0
    return round(numerator / denominator, 2)
