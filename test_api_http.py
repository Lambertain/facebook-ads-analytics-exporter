"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ /api/meta-data endpoint —á–µ—Ä–µ–∑ HTTP.
–ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä —Ç–∞ —Ä–æ–±–∏—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π HTTP –∑–∞–ø–∏—Ç.
"""
import requests
import json
import subprocess
import time
import sys
from datetime import datetime, timedelta

def test_api_with_http():
    """–¢–µ—Å—Ç—É—î API —á–µ—Ä–µ–∑ HTTP –∑–∞–ø–∏—Ç."""

    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø /api/meta-data ENDPOINT (HTTP)")
    print("="*80)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
    end_date = datetime.now().strftime("%Y-%m-%d")
    start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")

    print(f"\nüìÖ –ü–µ—Ä—ñ–æ–¥ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {start_date} - {end_date}")

    # URL endpoint
    base_url = "http://127.0.0.1:8000"
    endpoint = f"{base_url}/api/meta-data"

    print(f"\nüåê Endpoint: {endpoint}")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: start_date={start_date}, end_date={end_date}")

    try:
        print("\n‚è≥ –í–∏–∫–ª–∏–∫–∞—é API endpoint...")

        response = requests.get(
            endpoint,
            params={
                "start_date": start_date,
                "end_date": end_date
            },
            timeout=120  # 2 —Ö–≤–∏–ª–∏–Ω–∏ timeout
        )

        print(f"\nüì° HTTP Status: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ API –ø–æ–≤–µ—Ä–Ω—É–≤ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (200 OK)")

            result = response.json()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ–∫—Ü—ñ–π
            print("\n" + "-"*80)
            print("üìä –°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü:")
            print("-"*80)

            for key in result.keys():
                if key in ["ads", "students", "teachers"]:
                    count = len(result[key]) if isinstance(result[key], list) else 0
                    print(f"  ‚Ä¢ {key}: {count} –∑–∞–ø–∏—Å—ñ–≤")
                elif key == "column_metadata":
                    print(f"  ‚Ä¢ {key}: {len(result[key])} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
                elif key == "lead_phones":
                    print(f"  ‚Ä¢ {key}: –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                else:
                    print(f"  ‚Ä¢ {key}: {result[key]}")

            # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ column_metadata
            if "column_metadata" in result:
                print("\n" + "-"*80)
                print("üé® COLUMN METADATA (–ö–û–õ–¨–û–†–û–í–ê –ú–ê–†–ö–Ü–†–û–í–ö–ê):")
                print("-"*80)

                metadata = result["column_metadata"]

                for data_type in ["students", "teachers", "ads"]:
                    if data_type in metadata:
                        type_metadata = metadata[data_type]

                        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
                        meta_count = sum(1 for v in type_metadata.values() if v == "meta")
                        crm_count = sum(1 for v in type_metadata.values() if v == "crm")
                        formula_count = sum(1 for v in type_metadata.values() if v == "formula")

                        print(f"\n  {data_type.upper()}:")
                        print(f"    üîµ Meta (–≥–æ–ª—É–±—ñ): {meta_count} –ø–æ–ª—ñ–≤")
                        print(f"    üî¥ CRM (—Ä–æ–∂–µ–≤—ñ): {crm_count} –ø–æ–ª—ñ–≤")
                        print(f"    üü¢ Formula (–∑–µ–ª–µ–Ω—ñ): {formula_count} –ø–æ–ª—ñ–≤")
                        print(f"    üìä –í—Å—å–æ–≥–æ: {len(type_metadata)} –ø–æ–ª—ñ–≤")

                        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
                        print(f"\n    –ü—Ä–∏–∫–ª–∞–¥–∏ –ø–æ–ª—ñ–≤:")
                        shown = 0
                        for field, category in type_metadata.items():
                            if shown < 5:
                                color_icon = "üîµ" if category == "meta" else "üî¥" if category == "crm" else "üü¢"
                                print(f"      {color_icon} {field}: {category}")
                                shown += 1

            # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ lead_phones
            if "lead_phones" in result:
                print("\n" + "-"*80)
                print("üìû LEAD PHONES (–¢–ï–õ–ï–§–û–ù–ò –ó –°–¢–ê–¢–£–°–ê–ú–ò):")
                print("-"*80)

                lead_phones = result["lead_phones"]

                for data_type in ["students", "teachers"]:
                    if data_type in lead_phones and lead_phones[data_type]:
                        type_phones = lead_phones[data_type]
                        print(f"\n  {data_type.upper()}:")
                        print(f"    üìã –ö–∞–º–ø–∞–Ω—ñ–π –∑ –¥–∞–Ω–∏–º–∏: {len(type_phones)}")

                        if type_phones:
                            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 –∫–∞–º–ø–∞–Ω—ñ—ó
                            for idx, (campaign_id, status_data) in enumerate(list(type_phones.items())[:2]):
                                print(f"\n    –ö–∞–º–ø–∞–Ω—ñ—è {idx+1} ({campaign_id}):")
                                print(f"      –°—Ç–∞—Ç—É—Å—ñ–≤: {len(status_data)}")

                                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Å—Ç–∞—Ç—É—Å–∏
                                for status_name, phones in list(status_data.items())[:3]:
                                    print(f"\n        üìä –°—Ç–∞—Ç—É—Å: {status_name}")
                                    print(f"           –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {len(phones)}")

                                    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ passed/current
                                    passed = sum(1 for p in phones if p.get("status") == "passed")
                                    current = sum(1 for p in phones if p.get("status") == "current")
                                    print(f"           üî¥ Passed: {passed}")
                                    print(f"           üü¢ Current: {current}")

                                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —è–∫ –ø—Ä–∏–∫–ª–∞–¥
                                    if phones:
                                        for i, example in enumerate(phones[:2]):
                                            status_icon = "üî¥" if example.get("status") == "passed" else "üü¢"
                                            phone = example.get('phone', 'N/A')
                                            # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
                                            if len(phone) > 6:
                                                phone = phone[:3] + "****" + phone[-3:]
                                            print(f"           {i+1}. {status_icon} {phone} ({example.get('status')})")
                    else:
                        print(f"\n  {data_type.upper()}: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Ñ–∞–π–ª
            output_file = "test_api_response.json"
            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ –ü–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_file}")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n" + "="*80)
            print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
            print("="*80)

            return True

        else:
            print(f"‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {response.status_code}")
            print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:500]}")
            return False

    except requests.exceptions.ConnectionError:
        print("\n‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ:")
        print("   cd D:\\Automation\\Development\\projects\\ecademy")
        print("   uvicorn app.main:app --reload")
        return False
    except requests.exceptions.Timeout:
        print("\n‚ùå –ü–û–ú–ò–õ–ö–ê: Timeout - –∑–∞–ø–∏—Ç –∑–∞–π–Ω—è–≤ –±—ñ–ª—å—à–µ 2 —Ö–≤–∏–ª–∏–Ω")
        return False
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–Ü–î –ß–ê–° –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
        print(f"  {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...")
    print("\n‚ö†Ô∏è  –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://127.0.0.1:8000")
    print("    –Ø–∫—â–æ –Ω—ñ, –∑–∞–ø—É—Å—Ç—ñ—Ç—å: uvicorn app.main:app --reload")

    input("\n   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    success = test_api_with_http()

    if success:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        sys.exit(1)
